{"version":3,"sources":["routes/Home/Home.js","routes/Video/Video.js","routes/About/About.js","routes/Blog/Blog.js","routes/Book/Book.js","routes/Contact/Contact.js","routes/LangSwitch/LangSwitch.js","App.js","serviceWorker.js","index.js"],"names":["Home","React","Component","Video","About","Blog","Book","Contact","LangSwitch","state","koreanActive","toggleSwitch","setState","this","className","onClick","props","setLang","onChange","checked","type","name","App","korean","currentView","hamburgerActive","setView","view","toggleHamburger","hamburgerClass","sidebarClass","to","href","rel","target","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9131d731.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <section>\n                Home\n            </section>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './Video.css';\n\nclass Video extends React.Component {\n    render() {\n        return (\n            <section>\n                Video\n            </section>\n        )\n    }\n}\n\nexport default Video;","import React from 'react';\nimport './About.css';\n\nclass About extends React.Component {\n    render() {\n        return (\n            <section>\n                About\n            </section>\n        )\n    }\n}\n\nexport default About;","import React from 'react';\nimport './Blog.css';\n\nclass Blog extends React.Component {\n    render() {\n        return (\n            <section>\n                Blog\n            </section>\n        )\n    }\n}\n\nexport default Blog;","import React from 'react';\nimport './Book.css';\n\nclass Book extends React.Component {\n    render() {\n        return (\n            <section>\n                Book\n            </section>\n        )\n    }\n}\n\nexport default Book;","import React from 'react';\nimport './Contact.css';\n\nclass Contact extends React.Component {\n    render() {\n        return (\n            <section>\n                Contact\n            </section>\n        )\n    }\n}\n\nexport default Contact;","import React from 'react';\nimport './LangSwitch.css';\n\nclass LangSwitch extends React.Component {\n    state = {\n        koreanActive: false\n    }\n    toggleSwitch = () => {\n        const { koreanActive } = this.state\n        this.setState({ koreanActive: !koreanActive })\n    }\n    render() {\n        const { koreanActive } = this.state\n        return (\n            <div className='center'>\n                <h3>\n                    <span className={!koreanActive && 'active-lang'} >\n                        English\n                    </span> \n                    / \n                    <span className={koreanActive && 'active-lang'}>\n                        Korean\n                    </span>\n                </h3>\n                <input \n                    onClick={this.props.setLang}\n                    onChange={this.toggleSwitch}\n                    checked={koreanActive}\n                    type='checkbox' \n                    name='' />\n            </div>\n        )\n    }\n}\n\nexport default LangSwitch","import React from 'react';\nimport Home from './routes/Home/Home';\nimport Video from './routes/Video/Video';\nimport About from './routes/About/About';\nimport Blog from './routes/Blog/Blog';\nimport Book from './routes/Book/Book';\nimport Contact from './routes/Contact/Contact';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { IoLogoYoutube } from 'react-icons/io'\nimport { FaLinkedinIn, FaFacebookF } from 'react-icons/fa'\nimport { FiMail } from 'react-icons/fi'\nimport './App.css';\nimport './Hamburger.css';\nimport LangSwitch from './routes/LangSwitch/LangSwitch';\n\nclass App extends React.Component {\n  state = {\n    korean: false,\n    currentView: '/',\n    hamburgerActive: false,\n  }\n  setView = view => {\n    this.setState({ currentView: view })\n  }\n  toggleHamburger = () => {\n    const { hamburgerActive } = this.state\n    this.setState({ hamburgerActive: !hamburgerActive })\n  }\n  setLang = () => {\n    const { korean } = this.state\n    this.setState({ korean: !korean })\n  }\n  render() {\n    const { currentView, hamburgerActive, korean, } = this.state\n    const hamburgerClass = hamburgerActive ? 'hamburger hamburger--collapse is-active' : 'hamburger hamburger--collapse'\n    const sidebarClass = hamburgerActive ? 'side-nav active-side-nav' : 'side-nav'\n    return (\n      <div className=\"App\">\n        <nav className={sidebarClass}>\n          <div className='side-nav-block'>\n            <div className='side-nav-links'>\n              <div className='side-links'>\n                <Link onClick={() => {\n                    this.setView('/blog')\n                    this.toggleHamburger()}\n                  }\n                  to='/blog'>\n                  { korean ? '블로그' : 'Blog' }\n                </Link>\n                <Link onClick={() =>{\n                    this.setView('/about')\n                    this.toggleHamburger()}\n                  }\n                  to='/about'>\n                  { korean ? '비디오' : 'About' }\n                </Link>\n                {/* <Link onClick={() => {\n                    this.setView('/about')\n                    this.toggleHamburger()}\n                  } \n                  to='/book'>Book</Link> */}\n                <a \n                  href='https://www.overdrive.com/media/2180549/영원히-젊은-아버지의-이야기-forever-young-a-fathers-tale'\n                  rel=\"noopener noreferrer\"\n                  target='_blank'\n                  onClick={this.toggleHamburger}\n                >\n                  { korean ? '책' : 'Book' }\n                </a>\n                <LangSwitch setLang={this.setLang} />\n              </div>\n              <div className='side-links'>\n                <Link onClick={() => {\n                    this.setView('/video')\n                    this.toggleHamburger()}\n                  }\n                  to='/video'>\n                  { korean ? '비디오' : 'Video' }\n                </Link>\n                <Link onClick={() => {\n                    this.setView('/contact')\n                    this.toggleHamburger()}\n                  }\n                  to='/contact'>\n                  { korean ? '연락' : 'Reach Out' }\n                </Link>\n                <a \n                  href='http://young-chung.blogspot.com/'\n                  rel=\"noopener noreferrer\"\n                  target='_blank'\n                  onClick={this.toggleHamburger}\n                  to='/'>\n                  { korean ? '오래된' : 'Past Posts' }\n                </a>\n              </div>\n            </div>\n            <div className='side-nav-icons'>\n              <div className='sidecon'>\n                <FaFacebookF />\n              </div>\n              <div className='sidecon'>\n                <FaLinkedinIn />\n              </div>\n              <div className='sidecon'>\n                <IoLogoYoutube />\n              </div>\n              <div className='sidecon'>\n                <FiMail />\n              </div>\n            </div>\n          </div>\n        </nav>\n        <nav className='navbar'>\n          <Link \n            className={currentView === '/blog' ? 'nav-active' : ''}\n            onClick={() => this.setView('/blog')}\n            to='/blog'>\n            { korean ? '블로그' : 'Blog' }\n            \n          </Link>\n          <Link \n            className={currentView === '/video' ? 'nav-active' : ''}\n            onClick={() => this.setView('/video')}\n            to='/video'>\n            { korean ? '비디오' : 'Video Series' }\n          </Link>\n          <Link \n            className={currentView === '/' ? 'name nav-active' : 'name'}\n            onClick={() => this.setView('/')}\n            to='/'>\n            <span className='name'>{ korean ? 'YC 멘토링' : 'YC Mentoring' }</span>\n          </Link>\n          <Link \n            className={currentView === '/about' ? 'nav-active' : ''}\n            onClick={() => this.setView('/about')}\n            to='/about'>\n            { korean ? '나에 대해서' : 'About' }\n          </Link>\n          <Link \n            className={currentView === '/contact' ? 'nav-active' : ''}\n            onClick={() => this.setView('/contact')}\n            to='/contact'>\n            { korean ? '연락' : 'Work With Me' }\n          </Link>\n          <h1 className='mobile-name'>\n            { korean ? 'YC 멘토링' : 'YC Mentoring' }\n          </h1>\n          <button \n            onClick={this.toggleHamburger}\n            className={hamburgerClass} \n            type=\"button\">\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\"></span>\n            </span>\n          </button>\n        </nav>\n        <main>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/blog' component={Blog} />\n            <Route path='/video' component={Video} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route path='/book' component={Book} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}